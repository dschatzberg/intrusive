var searchIndex = {};
searchIndex['intrusive_containers'] = {"items":[[0,"","intrusive_containers","",null,null],[0,"linked_list","","An intrusive double-linked list.",null,null],[3,"LinkedList","intrusive_containers::linked_list","An intrusive doubly-linked list",null,null],[3,"Links","","",null,null],[3,"NodeImpl","","",null,null],[12,"link","","",0,null],[12,"val","","",0,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`",null,null],[3,"IntoIter","","",null,null],[8,"OwningPointer","","A trait that allows insertion into a `LinkedList`.\nThe trait is unsafe to implement due to the following constraints:\n1) The deref functions must always return the same reference\n2) The object cannot be moved while in the `LinkedList`\n3) No references (mutable or otherwise) to the target can be used while\n     list operations are ongoing",null,null],[10,"from_raw","","",1,null],[10,"take","","",1,{"inputs":[{"name":"owningpointer"}],"output":null}],[8,"Node","","A trait that allows a struct to be inserted into a `LinkedList`",null,null],[10,"get_val","","Getter for underlying value",2,{"inputs":[{"name":"node"}],"output":{"name":"t"}}],[10,"get_val_mut","","Getter for mutable underlying value",2,{"inputs":[{"name":"node"}],"output":{"name":"t"}}],[10,"get_links","","Getter for links",2,{"inputs":[{"name":"node"}],"output":{"name":"l"}}],[10,"get_links_mut","","Getter for mutable links",2,{"inputs":[{"name":"node"}],"output":{"name":"l"}}],[11,"get_next","","",2,{"inputs":[{"name":"node"}],"output":{"name":"rawlink"}}],[11,"get_next_mut","","",2,{"inputs":[{"name":"node"}],"output":{"name":"rawlink"}}],[11,"get_prev","","",2,{"inputs":[{"name":"node"}],"output":{"name":"rawlink"}}],[11,"get_prev_mut","","",2,{"inputs":[{"name":"node"}],"output":{"name":"rawlink"}}],[8,"Linkable","","Link trait allowing a struct to be inserted into a `LinkedList`",null,null],[16,"Container","","",3,null],[10,"get_links","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"links"}}],[10,"get_links_mut","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"links"}}],[11,"get_next","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"rawlink"}}],[11,"get_next_mut","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"rawlink"}}],[11,"get_prev","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"rawlink"}}],[11,"get_prev_mut","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"rawlink"}}],[10,"offset","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"usize"}}],[11,"container_of","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"container"}}],[11,"container_of_mut","","",3,{"inputs":[{"name":"linkable"}],"output":{"name":"container"}}],[11,"check_links","","",3,{"inputs":[{"name":"linkable"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"links"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"links"}],"output":{"name":"links"}}],[11,"clone","","",4,{"inputs":[{"name":"links"}],"output":{"name":"links"}}],[11,"fmt","","",0,{"inputs":[{"name":"nodeimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"nodeimpl"}],"output":{"name":"nodeimpl"}}],[11,"clone","","",0,{"inputs":[{"name":"nodeimpl"}],"output":{"name":"nodeimpl"}}],[11,"new","","Creates an empty `LinkedList`",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",5,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":null}],[11,"iter","","Provides a forward iterator.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","",5,{"inputs":[{"name":"linkedlist"}],"output":null}],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",5,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":null}],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",5,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",5,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"iter_mut","","Provides a forward iterator with mutable references",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"default","","",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"clone","","",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",5,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",5,{"inputs":[{"name":"linkedlist"}],"output":null}],[11,"hash","","",5,{"inputs":[{"name":"linkedlist"},{"name":"h"}],"output":null}],[11,"extend","","",5,{"inputs":[{"name":"linkedlist"},{"name":"i"}],"output":null}],[11,"from_iter","","",5,{"inputs":[{"name":"linkedlist"},{"name":"i"}],"output":{"name":"linkedlist"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","","",5,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"eq","","",5,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"drop","","",4,{"inputs":[{"name":"links"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"nodeimpl"},{"name":"h"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"nodeimpl"},{"name":"nodeimpl"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"nodeimpl"},{"name":"nodeimpl"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"nodeimpl"},{"name":"nodeimpl"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","","",null,null],[11,"next","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",7,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",7,{"inputs":[{"name":"itermut"},{"name":"t"}],"output":null}],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",7,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from_raw","alloc::boxed","",9,null],[11,"take","","",9,{"inputs":[{"name":"box"}],"output":null}],[14,"define_list_element!","intrusive_containers","",null,null],[14,"declare_list_link!","","",null,null],[14,"declare_list_elt!","","",null,null],[14,"impl_list_link!","","",null,null],[14,"impl_list_elt!","","",null,null]],"paths":[[3,"NodeImpl"],[8,"OwningPointer"],[8,"Node"],[8,"Linkable"],[3,"Links"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Box"]]};
initSearch(searchIndex);
